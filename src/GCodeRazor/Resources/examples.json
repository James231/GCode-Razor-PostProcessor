[
  {
    "type": "label",
    "content": "Press the \"G-Code\" button on the right hand side to view the raw G-Code output code for each example.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "heading",
    "content": "Basics",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "You can declare values at the top of your file. Each must have a different name. For example, you can assign value \"1.234\" to the name \"radius\" with:",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@{\r\n\tdouble radius = 1.234;\r\n\tdouble angle = 18 * 4;\r\n\tdouble sidelength = sin(angle);\r\n}",
    "g_code": "",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Then you can use the value anywhere in the file, together with calculations:",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@{\r\n\tdouble radius = 1.234;\r\n}\r\n\r\nN10 X@(radius)\r\nOR\r\nN10 X@(radius*2)",
    "g_code": "N10 X1.234\r\nOR\r\nN10 X2.468",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Note that to include a \"@\" symbol in the ouput file, you need to write \"@@\" in the input file.",
    "top_margin": 15,
    "bottom_margin": 0
  },



  {
    "type": "heading",
    "content": "Loops",
    "top_margin": 40,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Repeats a block 5 times.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i < 5; i++) {\r\n@:N10 G00 X0.1 Y0.1\r\n@:N20 G01 X0.2 Y0.2\r\n}",
    "g_code": "N10 G00 X0.1 Y0.1\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1\r\nN20 G01 X0.2 Y0.2",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Repeats a line 5 times, increasing the X position by 0.1 each time, starting at 0.2.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i < 5; i++) {\r\n@:N10 G00 X@(0.2+(i*0.1)) Y0.1\r\n}",
    "g_code": "N10 G00 X0.2 Y0.1\r\nN10 G00 X0.3 Y0.1\r\nN10 G00 X0.4 Y0.1\r\nN10 G00 X0.5 Y0.1\r\nN10 G00 X0.6 Y0.1",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Repeats a line 5 times, decreasing the X position by 0.1 each time, starting at 0.6.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i < 5; i++) {\r\n@:N10 G00 X@(0.6-(i*0.1)) Y0.1\r\n}",
    "g_code": "N10 G00 X0.6 Y0.1\r\nN10 G00 X0.5 Y0.1\r\nN10 G00 X0.4 Y0.1\r\nN10 G00 X0.3 Y0.1\r\nN10 G00 X0.2 Y0.1",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Increases X from 0 to 1 INCLUSIVE by increments of 0.1 (11 points), AND decreases Y from -1 to -2 by increments of 0.1.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i <= 10; i++) {\r\n@:N10 G00 X@(i*0.1) Y@(-1-(0.1*i))\r\n}",
    "g_code": "N10 G00 X0 Y-1\r\nN10 G00 X0.1 Y-1.1\r\nN10 G00 X0.2 Y-1.2\r\nN10 G00 X0.3 Y-1.3\r\nN10 G00 X0.4 Y-1.4\r\nN10 G00 X0.5 Y-1.5\r\nN10 G00 X0.6 Y-1.6\r\nN10 G00 X0.7 Y-1.7\r\nN10 G00 X0.8 Y-1.8\r\nN10 G00 X0.9 Y-1.9\r\nN10 G00 X1 Y-2",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Draws a square which gets bigger and bigger. You can run the output of this in CIMCO.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "N10 M98 P17\r\nN20 M6 T1\r\nN30 G43H1S1000M03\r\nN40 G0 Z-0.1\r\nN50 G00 X0Y0\r\n@for(int i = 0; i < 20; i++)\r\n{\r\n@:N60 G1 X@(2.0+(0.1*i)) Y@(-2.0-(0.1*i))\r\n@:N70 X@(2.0+(0.1*i)) Y@(2.0+(0.1*i))\r\n@:N80 X@(-2.0-(0.1*i)) Y@(2.0+(0.1*i))\r\n@:N90 X@(-2.0-(0.1*i)) Y@(-2.0-(0.1*i))\r\n}\r\nN100 G00 X0 Y0\r\nN110 Z1.0\r\nN120 M98 P17\r\nN130 M30",
    "g_code": "N10 M98 P17\r\nN20 M6 T1\r\nN30 G43H1S1000M03\r\nN40 G0 Z-0.1\r\nN50 G00 X0Y0\r\nN60 G1 X2 Y-2\r\nN70 X2 Y2\r\nN80 X-2 Y2\r\nN90 X-2 Y-2\r\nN60 G1 X2.1 Y-2.1\r\nN70 X2.1 Y2.1\r\nN80 X-2.1 Y2.1\r\nN90 X-2.1 Y-2.1\r\nN60 G1 X2.2 Y-2.2\r\nN70 X2.2 Y2.2\r\nN80 X-2.2 Y2.2\r\nN90 X-2.2 Y-2.2\r\nN60 G1 X2.3 Y-2.3\r\nN70 X2.3 Y2.3\r\nN80 X-2.3 Y2.3\r\nN90 X-2.3 Y-2.3\r\nN60 G1 X2.4 Y-2.4\r\nN70 X2.4 Y2.4\r\nN80 X-2.4 Y2.4\r\nN90 X-2.4 Y-2.4\r\nN60 G1 X2.5 Y-2.5\r\nN70 X2.5 Y2.5\r\nN80 X-2.5 Y2.5\r\nN90 X-2.5 Y-2.5\r\nN60 G1 X2.6 Y-2.6\r\nN70 X2.6 Y2.6\r\nN80 X-2.6 Y2.6\r\nN90 X-2.6 Y-2.6\r\nN60 G1 X2.7 Y-2.7\r\nN70 X2.7 Y2.7\r\nN80 X-2.7 Y2.7\r\nN90 X-2.7 Y-2.7\r\nN60 G1 X2.8 Y-2.8\r\nN70 X2.8 Y2.8\r\nN80 X-2.8 Y2.8\r\nN90 X-2.8 Y-2.8\r\nN60 G1 X2.9 Y-2.9\r\nN70 X2.9 Y2.9\r\nN80 X-2.9 Y2.9\r\nN90 X-2.9 Y-2.9\r\nN60 G1 X3 Y-3\r\nN70 X3 Y3\r\nN80 X-3 Y3\r\nN90 X-3 Y-3\r\nN60 G1 X3.1 Y-3.1\r\nN70 X3.1 Y3.1\r\nN80 X-3.1 Y3.1\r\nN90 X-3.1 Y-3.1\r\nN60 G1 X3.2 Y-3.2\r\nN70 X3.2 Y3.2\r\nN80 X-3.2 Y3.2\r\nN90 X-3.2 Y-3.2\r\nN60 G1 X3.3 Y-3.3\r\nN70 X3.3 Y3.3\r\nN80 X-3.3 Y3.3\r\nN90 X-3.3 Y-3.3\r\nN60 G1 X3.4 Y-3.4\r\nN70 X3.4 Y3.4\r\nN80 X-3.4 Y3.4\r\nN90 X-3.4 Y-3.4\r\nN60 G1 X3.5 Y-3.5\r\nN70 X3.5 Y3.5\r\nN80 X-3.5 Y3.5\r\nN90 X-3.5 Y-3.5\r\nN60 G1 X3.6 Y-3.6\r\nN70 X3.6 Y3.6\r\nN80 X-3.6 Y3.6\r\nN90 X-3.6 Y-3.6\r\nN60 G1 X3.7 Y-3.7\r\nN70 X3.7 Y3.7\r\nN80 X-3.7 Y3.7\r\nN90 X-3.7 Y-3.7\r\nN60 G1 X3.8 Y-3.8\r\nN70 X3.8 Y3.8\r\nN80 X-3.8 Y3.8\r\nN90 X-3.8 Y-3.8\r\nN60 G1 X3.9 Y-3.9\r\nN70 X3.9 Y3.9\r\nN80 X-3.9 Y3.9\r\nN90 X-3.9 Y-3.9\r\nN100 G00 X0 Y0\r\nN110 Z1.0\r\nN120 M98 P17\r\nN130 M30",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Show the iteration number \"i\" next to each block. Useful for checking your code is correct.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i < 5; i++) {\r\n@:N10 G00 X0.1 Y0.1 (i = @(i))\r\n@:N20 G01 X0.2 Y0.2\r\n}",
    "g_code": "N10 G00 X0.1 Y0.1 (i = 0)\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1 (i = 1)\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1 (i = 2)\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1 (i = 3)\r\nN20 G01 X0.2 Y0.2\r\nN10 G00 X0.1 Y0.1 (i = 4)\r\nN20 G01 X0.2 Y0.2",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Using a loop inside a loop. Gives all 0-3 integer combinations of X and Y, in a grid-like pattern.",
    "top_margin": 15,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i <= 3; i++) {\r\n@:Using X@(i)\r\n@for(int j = 0; j <= 3; j++) {\r\n@:X@(i) Y@(j)\r\n}\r\n}",
    "g_code": "Using X0\r\nX0 Y0\r\nX0 Y1\r\nX0 Y2\r\nX0 Y3\r\nUsing X1\r\nX1 Y0\r\nX1 Y1\r\nX1 Y2\r\nX1 Y3\r\nUsing X2\r\nX2 Y0\r\nX2 Y1\r\nX2 Y2\r\nX2 Y3\r\nUsing X3\r\nX3 Y0\r\nX3 Y1\r\nX3 Y2\r\nX3 Y3",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "card",
    "top_margin": 20,
    "bottom_margin": 0,
    "content": [
      {
        "type": "subheading",
        "content": "Summary",
        "top_margin": 0,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- To change the number of repeats, change the number on the first line. e.g. \"i < 5\" means 5 repeats.",
        "top_margin": 10,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- The number \"i\" represents the iteration number. It starts at zero and continues as long as the condition \"i < 5\" is satisfied. So we get another block/line for i=0,1,2,3, and 4.\nUse \"i <= 5\" if you want to include an extra block where \"i=5\".",
        "top_margin": 5,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- You can insert calculations by typing them between \"@(\" and \")\". For example, \"@(2*3)\" will be replaced by \"6\".",
        "top_margin": 5,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- You can use the number \"i\" within calculations to give a different number on each repetition of the line/block. For example, typing \"X@(i*5)\" will output \"X0\" in the first block (when i = 0), \"X5\" in the second block (when i = 1), ... etc.",
        "top_margin": 5,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- To increase a value, use the calculation \"@(0.5+(i*0.1))\" where \"0.5\" is the first value, and \"0.1\" is the increment.",
        "top_margin": 5,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- To decrease a value, use the calculation \"@(0.5-(i*0.1))\" where \"0.5\" is the first value, and \"-0.1\" is the increment.",
        "top_margin": 5,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- You can put loops inside other loops, but make sure the inner loop has a different letter, e.g. use \"j\" instead of \"i\".",
        "top_margin": 5,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "- If a loop uses the letter \"i\" then you can only use the letter within calculations inside the loop. It will not work outside the loop.",
        "top_margin": 5,
        "bottom_margin": 0
      }
    ]
  },
  {
    "type": "subheading",
    "content": "Alternative Loops",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Loops don't have to use an integer \"i\" that starts at 0. Instead you can reduce the number of calculations you write within the block, by setting a sensible value for \"i\" in the loop definition.",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "For example, here \"i\" starts at \"0.1\" and increases until it reaches \"1.4\". This uses \"<\" which is inclusive meaning a block is NOT created with i=1.5, instead the biggest value of \"i\" is 1.4.",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for (double i = 0.1; i < 1.5; i+=0.1) {\r\n@:N10 X@(i)\r\n}",
    "g_code": "N10 X0.1\r\nN10 X0.2\r\nN10 X0.3\r\nN10 X0.4\r\nN10 X0.5\r\nN10 X0.6\r\nN10 X0.7\r\nN10 X0.8\r\nN10 X0.9\r\nN10 X1\r\nN10 X1.1\r\nN10 X1.2\r\nN10 X1.3\r\nN10 X1.4",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Similarily, to make i decrease from \"1.4\" down to \"0.1\" use \"i-=0.1\" for the increment, and \"i>0\" for the continuation condition. This gives the same lines as above, in reverse order.",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for (double i = 1.4; i > 0; i-=0.1) {\r\n@:N10 X@(i)\r\n}",
    "g_code": "N10 X1.4\r\nN10 X1.3\r\nN10 X1.2\r\nN10 X1.1\r\nN10 X1\r\nN10 X0.9\r\nN10 X0.8\r\nN10 X0.7\r\nN10 X0.6\r\nN10 X0.5\r\nN10 X0.4\r\nN10 X0.3\r\nN10 X0.2\r\nN10 X0.0999999999999998",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "card",
    "top_margin": 20,
    "bottom_margin": 0,
    "content": [
      {
        "type": "subheading",
        "content": "Important",
        "top_margin": 0,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "The output of the above example has rounding errors. For this reason it is best not to use \"<=\" or \">=\". To fix the rounding errors see the section on Rounding.",
        "top_margin": 10,
        "bottom_margin": 0
      }
    ]
  },



  {
    "type": "heading",
    "content": "Trigonometry",
    "top_margin": 40,
    "bottom_margin": 0
  },
  {
    "type": "card",
    "top_margin": 20,
    "bottom_margin": 0,
    "content": [
      {
        "type": "subheading",
        "content": "Important",
        "top_margin": 0,
        "bottom_margin": 0
      },
      {
        "type": "label",
        "content": "By default all trigonometric operations work to as many decimal places as possible. If you only want 4 decimal places, see the next section on Rounding.",
        "top_margin": 5,
        "bottom_margin": 0
      }
    ]
  },
  {
    "type": "label",
    "content": "Compute the sin of an angle (in degrees). \"cos\" and \"tan\" work the same.",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(sin(45))",
    "g_code": "0.707106781186547",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "... and multiply it by 2",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(2*sin(45))",
    "g_code": "1.41421356237309",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "Compute the inverse sin using \"asin\" (or use \"acos\" or \"atan\" respectively). You can also nest trig functions inside other trig functions.",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(asin(sin(45)))\n@(acos(sin(45)))\n@(cos(sin(45)))",
    "g_code": "45\n45\n0.999923846611629",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "You can use the value of Pi as follows:",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(pi())",
    "g_code": "3.14159265358979",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "By combining trigonometry and loops, you can easily plot points around a circle. This example plots 8 points around a circle in X an Y, where we round to 4 decimal places:",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@for(int i = 0; i < 8; i++) {\r\n@:X@(cos(i*45, 4)) Y@(sin(i*45, 4))\r\n}",
    "g_code": "X1.0000 Y0.0000\r\nX0.7071 Y0.7071\r\nX0.0000 Y1.0000\r\nX-0.7071 Y0.7071\r\nX-1.0000 Y0.0000\r\nX-0.7071 Y-0.7071\r\nX0.0000 Y-1.0000\r\nX0.7071 Y-0.7071",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "There are two additional functions to convert between radians and degrees:",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(ToRadians(180))\r\n@(ToDegrees(pi()))",
    "g_code": "3.14159265358979\r\n180",
    "top_margin": 10,
    "bottom_margin": 0
  },


  {
    "type": "heading",
    "content": "Rounding",
    "top_margin": 40,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "To round a number to 4 decimal places use the \"round\" function. Only do this after you have performed all the operations you want to the number.",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(round(1.23456))\r\n@(round(sin(45)))",
    "g_code": "1.2346\r\n0.7071",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "To round to a different number of decimal places, provide another integer value to \"round\" after a comma:",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(round(1.23456, 2))\r\n@(round(sin(45), 7))",
    "g_code": "1.23\r\n0.7071068",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "label",
    "content": "As a shortcut, some functions like \"sin\", \"asin\", and \"pi\" accept a second integer to round the result without needing \"round\":",
    "top_margin": 10,
    "bottom_margin": 0
  },
  {
    "type": "code",
    "razor_code": "@(sin(45, 7))\r\n@(asin(0.7071, 1))\r\n@(pi(6))",
    "g_code": "0.7071068\r\n45.0\r\n3.141593",
    "top_margin": 10,
    "bottom_margin": 0
  }
]